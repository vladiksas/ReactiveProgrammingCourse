type: edu
custom_name: Trading Service
files:
- name: src/service/impl/DefaultTradeService.java
  visible: true
  placeholders:
  - offset: 1566
    length: 2095
    placeholder_text: Flux.never();
    initial_state:
      length: 13
      offset: 1566
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: "input.handle((m, s) -> {\n\t\t\tif (MessageMapper.isTradeMessageType(m))\
      \ {\n\t\t\t\ts.next(MessageMapper.mapToTradeMessage(m));\n\t\t\t}\n\t\t});"
  - offset: 3784
    length: 13
    placeholder_text: Flux.never();
    initial_state:
      length: 13
      offset: 1744
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: input.map(DomainMapper::mapToDomain);
  - offset: 3944
    length: 20
    placeholder_text: return Mono.never();
    initial_state:
      length: 20
      offset: 1918
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: "Sinks.Many<Long> delayNotifier =\n\t\t\t\tSinks.unsafe()\n\
      \t\t\t\t     .many()\n\t\t\t\t     .multicast()\n\t\t\t\t     .onBackpressureBuffer(1,\
      \ false);\n\t\tSinks.Many<Long> intervalNotifier =\n\t\t\t\tSinks.unsafe()\n\
      \t\t\t\t     .many()\n\t\t\t\t     .multicast()\n\t\t\t\t     .onBackpressureBuffer(1,\
      \ false);\n\n\t\tdelayNotifier.emitNext(0L, FAIL_FAST);\n\t\tintervalNotifier.emitNext(0L,\
      \ FAIL_FAST);\n\n\t\treturn input\n\t\t\t.bufferWhen(\n\t\t\t\tFlux.interval(Duration.ZERO,\
      \ Duration.ofSeconds(1))\n\t\t\t\t    .onBackpressureDrop()\n\t\t\t\t    .concatMap(v\
      \ -> Mono.just(v).delayUntil(__ -> intervalNotifier.asFlux().next()), 1),\n\t\
      \t\t\te -> delayNotifier.asFlux().zipWith(Mono.delay(Duration.ofMillis(1000)))\n\
      \t\t\t)\n\t\t\t.doOnNext(__ -> logger.warn(\".buffer(Duration.ofMillis(100))\
      \ onNext(\" + __ + \")\"))\n\t\t\t.concatMap(trades -> {\n\t\t\t\tif (trades.isEmpty())\
      \ {\n\t\t\t\t\treturn Mono\n\t\t\t\t\t\t.empty()\n\t\t\t\t\t\t.doFirst(() ->\
      \ intervalNotifier.emitNext(0L, FAIL_FAST))\n\t\t\t\t\t\t.then(Mono.fromRunnable(()\
      \ -> delayNotifier.emitNext(0L, FAIL_FAST)));\n\t\t\t\t}\n\n\t\t\t\treturn Mono\n\
      \t\t\t\t\t.zip(\n\t\t\t\t\t\t\tsaveIntoMongoDatabase(tradeRepository1, trades),\n\
      \t\t\t\t\t\t\tsaveIntoRelationalDatabase(tradeRepository2, trades)\n\t\t\t\t\
      \t)\n\t\t\t\t\t.doFirst(() -> intervalNotifier.emitNext(0L, FAIL_FAST))\n\t\t\
      \t\t\t.then(Mono.fromRunnable(() -> delayNotifier.emitNext(0L, FAIL_FAST)));\n\
      \t\t\t})\n\t\t\t.then();"
  - offset: 4071
    length: 13
    placeholder_text: Mono.never();
    initial_state:
      length: 13
      offset: 2045
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: "tradeRepository1\n\t\t\t\t.saveAll(trades)\n\t\t\t\
      \t.timeout(Duration.ofSeconds(1))\n\t\t\t\t.retryWhen(Retry.backoff(100, Duration.ofMillis(100))\n\
      \t\t\t\t                .maxBackoff(Duration.ofSeconds(5))\n\t\t\t\t       \
      \         .filter(exception -> {\n\t\t\t\t\t                if (exception instanceof\
      \ MongoException) {\n\t\t\t\t\t\t                return ((MongoException) exception).getCode()\
      \ != 11000;\n\t\t\t\t\t                }\n\n\t\t\t\t\t                return\
      \ true;\n\t\t\t\t                }))\n\t\t\t\t.onErrorResume(MongoException.class,\
      \ t -> Mono.empty())\n\t\t\t\t.thenReturn(1);"
  - offset: 4182
    length: 13
    placeholder_text: Mono.never();
    initial_state:
      length: 13
      offset: 2170
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: "tradeRepository2\n\t\t\t\t.saveAll(trades)\n\t\t\t\
      \t.timeout(Duration.ofSeconds(1))\n\t\t\t\t.retryWhen(Retry.backoff(100, Duration.ofMillis(500))\n\
      \t\t\t\t                .maxBackoff(Duration.ofMillis(5000)))\n\t\t\t\t.thenReturn(1);"
  text: "package service.impl;\n\nimport java.time.Duration;\nimport java.util.List;\n\
    import java.util.Map;\n\nimport com.mongodb.MongoException;\nimport domain.Trade;\n\
    import domain.utils.DomainMapper;\nimport dto.MessageDTO;\nimport org.slf4j.Logger;\n\
    import org.slf4j.LoggerFactory;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\
    import reactor.core.publisher.Sinks;\nimport reactor.util.retry.Retry;\nimport\
    \ repository.TradeRepository;\nimport service.CryptoService;\nimport service.TradeService;\n\
    import service.utils.MessageMapper;\n\nimport static reactor.core.publisher.Sinks.EmitFailureHandler.FAIL_FAST;\n\
    \npublic class DefaultTradeService implements TradeService {\n\n\tprivate static\
    \ final Logger logger = LoggerFactory.getLogger(\"trade-service\");\n\n\tprivate\
    \ final Flux<MessageDTO<MessageDTO.Trade>> sharedStream;\n\n\tpublic DefaultTradeService(CryptoService\
    \ service,\n\t\t\tTradeRepository jdbcRepository,\n\t\t\tTradeRepository mongoRepository\n\
    \t) {\n\t\tservice.eventsStream()\n\t\t       .transform(this::filterAndMapTradingEvents)\n\
    \t\t       .transform(this::mapToDomainTrade)\n\t\t       .as(f -> this.resilientlyStoreByBatchesToAllRepositories(f,\
    \ jdbcRepository, mongoRepository))\n\t\t       .subscribe();\n\t\tsharedStream\
    \ = service.eventsStream()\n\t\t                      .transform(this::filterAndMapTradingEvents);\n\
    \t}\n\n\t@Override\n\tpublic Flux<MessageDTO<MessageDTO.Trade>> tradesStream()\
    \ {\n\t\treturn sharedStream;\n\t}\n\n\tFlux<MessageDTO<MessageDTO.Trade>> filterAndMapTradingEvents(Flux<Map<String,\
    \ Object>> input) {\n\t\t// TODO: Add implementation to produce trading events\n\
    \t\treturn Flux.never();\n\t}\n\n\tFlux<Trade> mapToDomainTrade(Flux<MessageDTO<MessageDTO.Trade>>\
    \ input) {\n\t\t// TODO: Add implementation to mapping to com.example.part_10.domain.Trade\n\
    \t\treturn Flux.never();\n\t}\n\n\tMono<Void> resilientlyStoreByBatchesToAllRepositories(\n\
    \t\t\tFlux<Trade> input,\n\t\t\tTradeRepository tradeRepository1,\n\t\t\tTradeRepository\
    \ tradeRepository2) {\n\t\treturn Mono.never();\n\t}\n\n\tMono<Integer> saveIntoMongoDatabase(TradeRepository\
    \ tradeRepository1, List<Trade> trades) {\n\t\treturn Mono.never();\n\t}\n\n\t\
    Mono<Integer> saveIntoRelationalDatabase(TradeRepository tradeRepository2, List<Trade>\
    \ trades) {\n\t\treturn Mono.never();\n\t}\n\n}\n"
  learner_created: false
- name: src/repository/TradeRepository.java
  visible: true
  text: "package repository;\n\nimport java.util.List;\n\nimport domain.Trade;\nimport\
    \ reactor.core.publisher.Mono;\n\npublic interface TradeRepository {\n\n\tMono<Void>\
    \ saveAll(List<Trade> input);\n}\n"
  learner_created: false
- name: src/repository/impl/MongoTradeRepository.java
  visible: true
  text: "package repository.impl;\n\nimport java.time.Duration;\nimport java.util.List;\n\
    import java.util.stream.Collectors;\n\nimport com.mongodb.reactivestreams.client.MongoClient;\n\
    import com.mongodb.reactivestreams.client.MongoCollection;\nimport com.mongodb.reactivestreams.client.Success;\n\
    import domain.Trade;\nimport domain.utils.DomainMapper;\nimport org.bson.Document;\n\
    import org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport reactor.core.publisher.Flux;\n\
    import reactor.core.publisher.Mono;\nimport reactor.core.scheduler.Schedulers;\n\
    import repository.TradeRepository;\n\npublic class MongoTradeRepository implements\
    \ TradeRepository {\n\n\tprivate static final Logger log = LoggerFactory.getLogger(\"\
    mongo-repo\");\n\n\tprivate static final String DB_NAME         = \"crypto\";\n\
    \tprivate static final String COLLECTION_NAME = \"trades\";\n\n\tprivate final\
    \ MongoCollection<Document> collection;\n\n\tpublic MongoTradeRepository(MongoClient\
    \ client) {\n\t\tcollection = client.getDatabase(DB_NAME)\n\t\t              \
    \     .getCollection(COLLECTION_NAME);\n\n\t\treportDbStatistics();\n\t}\n\n\n\
    \tprivate void reportDbStatistics() {\n\t\tFlux.interval(Duration.ofSeconds(5))\n\
    \t\t    .flatMap(i -> this.getTradeStats())\n\t\t    .doOnNext(count -> log.warn(\"\
    ------------- [DB STATS] ------------ Trades \" +\n\t\t\t\t    \"stored in DB:\
    \ \" + count))\n\t\t    .subscribeOn(Schedulers.elastic())\n\t\t    .subscribe();\n\
    \t}\n\n\tprivate Mono<Long> getTradeStats() {\n\t\t// TODO: Return the current\
    \ amount of stored trades\n\t\treturn Mono.fromDirect(collection.countDocuments());\n\
    \t}\n\n\tpublic Mono<Void> saveAll(List<Trade> trades) {\n\t\treturn this\n\t\t\
    \t.storeInMongo(\n\t\t\t\ttrades\n\t\t\t\t\t.stream()\n\t\t\t\t\t.map(DomainMapper::mapToMongoDocument)\n\
    \t\t\t\t\t.collect(Collectors.toList())\n\t\t\t)\n\t\t\t.then();\n\t}\n\n\tprivate\
    \ Mono<Success> storeInMongo(List<Document> trades) {\n\t\treturn Mono.from(collection.insertMany(trades));\n\
    \t}\n}\n"
  learner_created: false
- name: src/domain/Trade.java
  visible: true
  text: "package domain;\n\npublic class Trade {\n\n\tprivate String id;\n\tprivate\
    \ long     timestamp;\n\tprivate float    price;\n\tprivate float    amount;\n\
    \tprivate String   currency;\n\tprivate String   market;\n\n\tpublic String getId()\
    \ {\n\t\treturn id;\n\t}\n\n\tpublic void setId(String id) {\n\t\tthis.id = id;\n\
    \t}\n\n\tpublic long getTimestamp() {\n\t\treturn timestamp;\n\t}\n\n\tpublic\
    \ void setTimestamp(long timestamp) {\n\t\tthis.timestamp = timestamp;\n\t}\n\n\
    \tpublic float getPrice() {\n\t\treturn price;\n\t}\n\n\tpublic void setPrice(float\
    \ price) {\n\t\tthis.price = price;\n\t}\n\n\tpublic float getAmount() {\n\t\t\
    return amount;\n\t}\n\n\tpublic void setAmount(float amount) {\n\t\tthis.amount\
    \ = amount;\n\t}\n\n\tpublic String getCurrency() {\n\t\treturn currency;\n\t\
    }\n\n\tpublic void setCurrency(String currency) {\n\t\tthis.currency = currency;\n\
    \t}\n\n\tpublic String getMarket() {\n\t\treturn market;\n\t}\n\n\tpublic void\
    \ setMarket(String market) {\n\t\tthis.market = market;\n\t}\n\n\t@Override\n\t\
    public boolean equals(Object o) {\n\t\tif (this == o) {\n\t\t\treturn true;\n\t\
    \t}\n\t\tif (o == null || getClass() != o.getClass()) {\n\t\t\treturn false;\n\
    \t\t}\n\n\t\tTrade trade = (Trade) o;\n\n\t\tif (timestamp != trade.timestamp)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif (Float.compare(trade.price, price) !=\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (Float.compare(trade.amount, amount)\
    \ != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (id != null ? !id.equals(trade.id)\
    \ : trade.id != null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!currency.equals(trade.currency))\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\treturn market.equals(trade.market);\n\t}\n\
    \n\t@Override\n\tpublic int hashCode() {\n\t\tint result = id != null ? id.hashCode()\
    \ : 0;\n\t\tresult = 31 * result + (int) (timestamp ^ (timestamp >>> 32));\n\t\
    \tresult = 31 * result + (price != +0.0f ? Float.floatToIntBits(price) : 0);\n\
    \t\tresult = 31 * result + (amount != +0.0f ? Float.floatToIntBits(amount) : 0);\n\
    \t\tresult = 31 * result + currency.hashCode();\n\t\tresult = 31 * result + market.hashCode();\n\
    \t\treturn result;\n\t}\n\n\t@Override\n\tpublic String toString() {\n\t\treturn\
    \ \"Trade{\" + \"id=\" + id + \", timestamp=\" + timestamp + \", price=\" + price\
    \ + \", amount=\" + amount + \", currency='\" + currency + '\\'' + \", market='\"\
    \ + market + '\\'' + '}';\n\t}\n}\n"
  learner_created: false
- name: src/domain/utils/DomainMapper.java
  visible: true
  text: "package domain.utils;\n\nimport java.util.HashMap;\nimport java.util.UUID;\n\
    \nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\
    import domain.Trade;\nimport dto.MessageDTO;\nimport org.bson.Document;\n\npublic\
    \ class DomainMapper {\n\n\n\tpublic static Trade mapToDomain(MessageDTO<MessageDTO.Trade>\
    \ tradeMessageDTO) {\n\t\tTrade trade = new Trade();\n\n\t\ttrade.setId(UUID.randomUUID().toString());\n\
    \t\ttrade.setPrice(tradeMessageDTO.getData().getPrice());\n\t\ttrade.setAmount(tradeMessageDTO.getData().getAmount());\n\
    \t\ttrade.setCurrency(tradeMessageDTO.getCurrency());\n\t\ttrade.setMarket(tradeMessageDTO.getMarket());\n\
    \t\ttrade.setTimestamp(tradeMessageDTO.getTimestamp());\n\n\t\treturn trade;\n\
    \t}\n\n\tpublic static Document mapToMongoDocument(Trade trade) {\n\t\treturn\
    \ new Document(\n\t\t\t\tnew ObjectMapper()\n\t\t\t\t\t\t.convertValue(trade,\
    \ new TypeReference<HashMap<String, Object>>() {})\n\t\t);\n\t}\n}\n"
  learner_created: false
- name: src/repository/impl/H2TradeRepository.java
  visible: true
  text: |
    package repository.impl;

    import java.time.Duration;
    import java.util.Iterator;
    import java.util.List;

    import domain.Trade;
    import io.r2dbc.client.Handle;
    import io.r2dbc.client.R2dbc;
    import io.r2dbc.client.Update;
    import io.r2dbc.spi.ConnectionFactory;
    import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
    import reactor.core.publisher.Flux;
    import reactor.core.publisher.Mono;
    import reactor.core.scheduler.Schedulers;
    import repository.TradeRepository;

    public class H2TradeRepository implements TradeRepository {
        private static final Logger log = LoggerFactory.getLogger("h2-repo");

        private static String INIT_DB =
            "CREATE TABLE trades (" +
                "id varchar(48), " +
                "trade_timestamp long, " +
                "price float, " +
                "amount float, " +
                "currency varchar(8)," +
                "market varchar(64))";

        private static final String TRADES_COUNT_QUERY = "SELECT COUNT(*) as cnt FROM trades";

        private static final String INSERT_TRADE_QUERY =
            "INSERT INTO trades (id, trade_timestamp, price, amount, currency, market) " +
            "VALUES ($1, $2, $3, $4, $5, $6)";

        private final R2dbc h2Client;

        public H2TradeRepository(ConnectionFactory connectionFactory) {
    //        H2ConnectionConfiguration conf = H2ConnectionConfiguration.builder()
    //            .url("mem:db;DB_CLOSE_DELAY=-1;TRACE_LEVEL_SYSTEM_OUT=2")
    //            .build();
    //
    //        H2ConnectionFactory h2ConnectionFactory = new H2ConnectionFactory(conf);
            // TODO: Add connection pool
            h2Client = new R2dbc(connectionFactory);
            initDB();
            pingDB();
            reportDbStatistics();
        }

        private void initDB() {
            h2Client.inTransaction(session -> session
                .execute(INIT_DB)
                .doOnNext(i -> log.info("DB SCHEMA WAS INITIALIZED"))
            ).blockLast();
        }

        private void pingDB() {
            h2Client.withHandle(t -> t
                .createQuery("SELECT 6")
                .mapResult(result -> result.map((row, metadata) -> row.get(0))))
                .doOnNext(e -> log.warn("RESULT FOR SELECT 6 QUERY: " + e))
                .subscribe();
        }

        // Stats: log the amount of stored trades to log every 5 seconds
        private void reportDbStatistics() {
            Flux.interval(Duration.ofSeconds(5))
                .flatMap(i -> this.getTradeStats())
                .doOnNext(count -> log.info("------------- [DB STATS] ------------ Trades stored in DB: " + count))
                .subscribeOn(Schedulers.elastic())
                .subscribe();
        }

        @Override
        public Mono<Void> saveAll(List<Trade> trades) {
            return this
                .storeTradesInDb(trades)
                .doOnNext(e -> log.info("--- [DB] --- Inserted " + e + " trades into DB"))
                .then();
        }

        private Mono<Long> getTradeStats() {
            // TODO: Return the current amount of stored trades
            return Mono.defer(() ->
                // TODO: Instead of Mono.empty(), do a query to H2 database using h2Client.withHandle(...)
                // TODO: Use Handle.createQuery & TRADES_COUNT_QUERY with SQL
                // TODO: Map result row by row to get the result of query
                h2Client
                    .withHandle(handle ->
                        handle.createQuery(TRADES_COUNT_QUERY)
                              .mapRow(row -> row.get(0, Long.class))
                    )
                    .single()
            );
        }

        private Mono<Integer> storeTradesInDb(List<Trade> trades) {
            // TODO: Instead of Mono.never()
            // TODO: Use h2Client to create handle, build UPDATE statement, use transactional support!
            // TODO: Add all trades to update using buildInsertStatement(...) method
            // TODO: Return the amount of stored rows
            return Mono.fromDirect(
                    h2Client.inTransaction(handle ->
                            this.buildInsertStatement(handle, trades)
                                .execute()
                    )
            );
        }

        // --- Helper methods --------------------------------------------------

        // TODO: Use this method in storeTradesInDb(...) method
        private Update buildInsertStatement(Handle handle, List<Trade> trades) {
            Update update = handle.createUpdate(INSERT_TRADE_QUERY);

            Iterator<Trade> tradeIterator = trades.iterator();
            for (int i = 0; tradeIterator.hasNext(); i++) {
                Trade trade = tradeIterator.next();
                if (i != 0) {
                    update.add();
                }
                update
                    .bind("$1", trade.getId())
                    .bind("$2", trade.getTimestamp())
                    .bind("$3", trade.getPrice())
                    .bind("$4", trade.getAmount())
                    .bind("$5", trade.getCurrency())
                    .bind("$6", trade.getCurrency());
            }
            return update;
        }

    }
  learner_created: false
- name: build.gradle
  visible: false
  text: |-
    dependencies {

      implementation 'io.projectreactor.addons:reactor-extra'
      implementation 'org.mongodb:mongodb-driver-reactivestreams'
      implementation 'com.fasterxml.jackson.core:jackson-databind'
      implementation 'io.r2dbc:r2dbc-spi'
      implementation 'io.r2dbc:r2dbc-client'
      implementation project(':Reactive_In_Action-Crypto_Tracker-trade-service-idl')
      implementation project(':Reactive_In_Action-Crypto_Tracker-crypto-service-idl')
      implementation project(':Reactive_In_Action-Crypto_Tracker-common')
    }
  learner_created: false
- name: test/service/impl/TradeServiceTests.java
  visible: false
  text: "package service.impl;\n\nimport java.time.Duration;\nimport java.util.Arrays;\n\
    import java.util.LinkedList;\nimport java.util.List;\n\nimport domain.Trade;\n\
    import org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\
    import org.mockito.Mockito;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\
    import reactor.test.StepVerifier;\nimport reactor.test.publisher.TestPublisher;\n\
    import reactor.test.scheduler.VirtualTimeScheduler;\nimport repository.TradeRepository;\n\
    import repository.impl.MongoTradeRepository;\nimport service.CryptoService;\n\n\
    public class TradeServiceTests {\n\n\t@Test\n\tpublic void tradeServiceTest()\
    \ {\n\t\tVirtualTimeScheduler timeScheduler = VirtualTimeScheduler.getOrSet();\n\
    \t\ttry {\n\t\t\t// TODO add more tests\n\t\t\tCryptoService cryptoService = Mockito.mock(CryptoService.class);\n\
    \t\t\tTradeRepository h2Repository = Mockito.mock(TradeRepository.class);\n\t\t\
    \tMongoTradeRepository mongoRepository = Mockito.mock(MongoTradeRepository.class);\n\
    \n\t\t\tMockito.when(cryptoService.eventsStream())\n\t\t\t       .thenReturn(Flux.never());\n\
    \t\t\tDefaultTradeService tradeService =\n\t\t\t\t\tnew DefaultTradeService(cryptoService,\
    \ h2Repository, mongoRepository);\n\t\t\tTestPublisher<Trade> testPublisher =\
    \ TestPublisher.create();\n\n\t\t\tLinkedList<List> batchesH2Queue = new LinkedList<>();\n\
    \t\t\tLinkedList<List> batchesMongoQueue = new LinkedList<>();\n\n\t\t\tTestPublisher\
    \ publisher = TestPublisher.create();\n\n\n\t\t\tMockito.when(h2Repository.saveAll(Mockito.any()))\n\
    \t\t\t       .thenAnswer(a -> {\n\t\t\t\t       List<Trade> list = a.getArgument(0);\n\
    \t\t\t\t       batchesH2Queue.add(list);\n\t\t\t\t       return Mono.empty();\n\
    \t\t\t       });\n\n\t\t\tMockito.when(mongoRepository.saveAll(Mockito.any()))\n\
    \t\t\t       .thenAnswer(a -> {\n\t\t\t\t       List<Trade> list = a.getArgument(0);\n\
    \t\t\t\t       batchesMongoQueue.add(list);\n\t\t\t\t       return publisher.flux().next().then();\n\
    \t\t\t       });\n\n\t\t\tMono<Void> result = tradeService.resilientlyStoreByBatchesToAllRepositories(\n\
    \t\t\t\t\ttestPublisher.flux(),\n\t\t\t\t\th2Repository,\n\t\t\t\t\tmongoRepository);\n\
    \n\t\t\tStepVerifier.withVirtualTime(() -> result)\n\t\t\t            .expectSubscription()\n\
    \t\t\t            .then(() -> {\n\t\t\t\t            testPublisher.next(createTrade(\"\
    1\"));\n\t\t\t\t            testPublisher.next(createTrade(\"2\"));\n\t\t\t\t\
    \            testPublisher.next(createTrade(\"3\"));\n\t\t\t\t            testPublisher.next(createTrade(\"\
    4\"));\n\n\t\t\t\t            timeScheduler.advanceTimeBy(Duration.ofSeconds(1));\n\
    \n\t\t\t\t            publisher.next(1);\n\t\t\t\t            Assertions.assertThat(batchesH2Queue)\n\
    \t\t\t\t                      .containsExactly(Arrays.asList(\n\t\t\t\t\t    \
    \                  createTrade(\"1\"),\n\t\t\t\t\t                      createTrade(\"\
    2\"),\n\t\t\t\t\t                      createTrade(\"3\"),\n\t\t\t\t\t       \
    \               createTrade(\"4\")\n\t\t\t\t                      ));\n\t\t\t\t\
    \            Assertions.assertThat(batchesMongoQueue)\n\t\t\t\t              \
    \        .containsExactly(Arrays.asList(\n\t\t\t\t\t\t                      createTrade(\"\
    1\"),\n\t\t\t\t\t\t                      createTrade(\"2\"),\n\t\t\t\t\t\t   \
    \                   createTrade(\"3\"),\n\t\t\t\t\t\t                      createTrade(\"\
    4\")\n\t\t\t\t                      ));\n\n\t\t\t\t            batchesMongoQueue.clear();\n\
    \t\t\t\t            batchesH2Queue.clear();\n\t\t\t            })\n\t\t\t    \
    \        .then(() -> {\n\t\t\t\t            testPublisher.next(createTrade(\"\
    1\"));\n\t\t\t\t            testPublisher.next(createTrade(\"2\"));\n\t\t\t\t\
    \            testPublisher.next(createTrade(\"3\"));\n\t\t\t\t            testPublisher.next(createTrade(\"\
    4\"));\n\n\t\t\t\t            timeScheduler.advanceTimeBy(Duration.ofSeconds(1));\n\
    \n\n\t\t\t\t            testPublisher.next(createTrade(\"5\"));\n\t\t\t\t    \
    \        testPublisher.next(createTrade(\"6\"));\n\t\t\t\t            testPublisher.next(createTrade(\"\
    7\"));\n\t\t\t\t            testPublisher.next(createTrade(\"8\"));\n\n//\t\t\t\
    \t            publisher.next(1);\n\t\t\t\t            Assertions.assertThat(batchesH2Queue)\n\
    \t\t\t\t                      .containsExactly(Arrays.asList(\n\t\t\t\t\t\t  \
    \                    createTrade(\"1\"),\n\t\t\t\t\t\t                      createTrade(\"\
    2\"),\n\t\t\t\t\t\t                      createTrade(\"3\"),\n\t\t\t\t\t\t   \
    \                   createTrade(\"4\")\n\t\t\t\t                      ));\n\t\t\
    \t\t            Assertions.assertThat(batchesMongoQueue)\n\t\t\t\t           \
    \           .containsExactly(Arrays.asList(\n\t\t\t\t\t\t                    \
    \  createTrade(\"1\"),\n\t\t\t\t\t\t                      createTrade(\"2\"),\n\
    \t\t\t\t\t\t                      createTrade(\"3\"),\n\t\t\t\t\t\t          \
    \            createTrade(\"4\")\n\t\t\t\t                      ));\n\n\t\t\t\t\
    \            // timeout\n\t\t\t\t            timeScheduler.advanceTimeBy(Duration.ofSeconds(1));\n\
    \t\t\t\t            // retryBackoff\n\t\t\t\t            timeScheduler.advanceTimeBy(Duration.ofSeconds(1));\n\
    \n\n\n\t\t\t\t            testPublisher.next(createTrade(\"9\"));\n\t\t\t\t  \
    \          testPublisher.next(createTrade(\"10\"));\n\t\t\t\t            testPublisher.next(createTrade(\"\
    11\"));\n\t\t\t\t            testPublisher.next(createTrade(\"12\"));\n\n\n\t\t\
    \t\t            Assertions.assertThat(publisher.subscribeCount())\n\t\t\t\t  \
    \                    .isEqualTo(3);\n\n\t\t\t\t            batchesH2Queue.clear();\n\
    \t\t\t\t            batchesMongoQueue.clear();\n\t\t\t\t            publisher.next(1);\n\
    \n\t\t\t\t            timeScheduler.advanceTimeBy(Duration.ofSeconds(1));\n\n\t\
    \t\t\t            Assertions.assertThat(batchesH2Queue)\n\t\t\t\t            \
    \          .containsExactly(Arrays.asList(\n\t\t\t\t\t\t                     \
    \ createTrade(\"5\"),\n\t\t\t\t\t\t                      createTrade(\"6\"),\n\
    \t\t\t\t\t\t                      createTrade(\"7\"),\n\t\t\t\t\t\t          \
    \            createTrade(\"8\"),\n\t\t\t\t\t\t                      createTrade(\"\
    9\"),\n\t\t\t\t\t\t                      createTrade(\"10\"),\n\t\t\t\t\t\t  \
    \                    createTrade(\"11\"),\n\t\t\t\t\t\t                      createTrade(\"\
    12\")\n\t\t\t\t                      ));\n\t\t\t\t            Assertions.assertThat(batchesMongoQueue)\n\
    \t\t\t\t                      .containsExactly(Arrays.asList(\n\t\t\t\t\t\t  \
    \                    createTrade(\"5\"),\n\t\t\t\t\t\t                      createTrade(\"\
    6\"),\n\t\t\t\t\t\t                      createTrade(\"7\"),\n\t\t\t\t\t\t   \
    \                   createTrade(\"8\"),\n\t\t\t\t\t\t                      createTrade(\"\
    9\"),\n\t\t\t\t\t\t                      createTrade(\"10\"),\n\t\t\t\t\t\t  \
    \                    createTrade(\"11\"),\n\t\t\t\t\t\t                      createTrade(\"\
    12\")\n\t\t\t\t                      ));\n\t\t\t            })\n\t\t\t       \
    \     .thenCancel()\n\t\t\t            .verify();\n\n\t\t} finally {\n\t\t\tVirtualTimeScheduler.reset();\n\
    \t\t}\n\t}\n\n\tpublic static Trade createTrade(String id) {\n\t\tTrade trade\
    \ = new Trade();\n\t\ttrade.setId(id);\n\t\ttrade.setCurrency(\"test\");\n\t\t\
    trade.setAmount(1);\n\t\ttrade.setMarket(\"test\");\n\t\ttrade.setPrice(1);\n\t\
    \ttrade.setTimestamp(1);\n\t\treturn trade;\n\t}\n}"
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 18 Nov 2022 19:38:02 UTC"
record: -1
