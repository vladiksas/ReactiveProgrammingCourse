type: edu
custom_name: Task 4
files:
- name: test/HnSTask4Tests.java
  visible: false
  text: "import java.util.ArrayList;\n\nimport org.assertj.core.api.Assertions;\n\
    import org.junit.jupiter.api.Test;\nimport org.reactivestreams.Publisher;\nimport\
    \ reactor.core.publisher.Flux;\nimport reactor.core.publisher.Hooks;\nimport reactor.core.publisher.ReplayProcessor;\n\
    import reactor.core.publisher.UnicastProcessor;\nimport reactor.test.StepVerifier;\n\
    \npublic class HnSTask4Tests {\n\n\t@Test\n\tpublic void testSolution2() {\n\t\
    \tArrayList<Publisher> operators = new ArrayList<>();\n\t\tHooks.onEachOperator(e\
    \ -> {\n\t\t\toperators.add(e);\n\t\t\treturn e;\n\t\t});\n\n\t\ttry {\n\t\t\t\
    UnicastProcessor<String> source = UnicastProcessor.create();\n\t\t\tReplayProcessor<String>\
    \ consumer1 = ReplayProcessor.create(10);\n\t\t\tReplayProcessor<String> consumer2\
    \ = ReplayProcessor.create(10);\n\n\t\t\tPublisher<String> publisher = Task.transformToHot2(source);\n\
    \n\t\t\tpublisher.subscribe(consumer1);\n\n\t\t\tsource.onNext(\"A\");\n\t\t\t\
    source.onNext(\"B\");\n\t\t\tsource.onNext(\"C\");\n\n\t\t\tpublisher.subscribe(consumer2);\n\
    \n\t\t\tsource.onNext(\"D\");\n\t\t\tsource.onNext(\"E\");\n\t\t\tsource.onNext(\"\
    F\");\n\n\t\t\tsource.onComplete();\n\n\t\t\tStepVerifier.create(consumer1)\n\t\
    \t\t            .expectSubscription()\n\t\t\t            .expectNext(\"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\")\n\t\t\t            .verifyComplete();\n\n\t\t\
    \tStepVerifier.create(consumer2)\n\t\t\t            .expectSubscription()\n\t\t\
    \t            .expectNext(\"D\", \"E\", \"F\")\n\t\t\t            .verifyComplete();\n\
    \t\t}\n\t\tfinally {\n\t\t\tHooks.resetOnEachOperator();\n\t\t}\n\n\t\tAssertions.assertThat(operators)\n\
    \t\t          .as(\"Expected usage of built-in operator\")\n\t\t          .noneMatch(p\
    \ -> !p.getClass()\n\t\t                          .equals(Flux.just(1)\n\t\t \
    \                                     .hide()\n\t\t                          \
    \            .publish()\n\t\t                                      .getClass()));\n\
    \t}\n}"
  learner_created: false
- name: build.gradle
  visible: false
  text: |-
    dependencies {
      implementation 'io.projectreactor:reactor-core'
    }
  learner_created: false
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 229
    length: 52
    placeholder_text: Flux.error(new ToDoException());
    initial_state:
      length: 32
      offset: 229
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: coldSource.subscribeWith(EmitterProcessor.create());
  text: "import org.reactivestreams.Publisher;\nimport reactor.core.publisher.EmitterProcessor;\n\
    import reactor.core.publisher.Flux;\n\npublic class Task {\n\n\tpublic static\
    \ Publisher<String> transformToHot2(Flux<String> coldSource) {\n\t\treturn Flux.error(new\
    \ ToDoException());\n\t}\n}"
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 18 Nov 2022 19:22:59 UTC"
record: -1
