type: edu
custom_name: Task 2
files:
- name: src/Task.java
  visible: true
  placeholders:
  - offset: 197
    length: 34
    placeholder_text: Flux.error(new ToDoException());
    initial_state:
      length: 32
      offset: 197
    initialized_from_dependency: false
    selected: false
    status: Solved
    encrypted_possible_answer: publisher.onErrorReturn(fallback);
  text: "import org.reactivestreams.Publisher;\nimport reactor.core.publisher.Flux;\n\
    \npublic class Task {\n\n\tpublic static Publisher<String> fallbackOnError(Flux<String>\
    \ publisher, String fallback) {\n\t\treturn Flux.error(new ToDoException());\n\
    \t}\n}"
  learner_created: false
- name: test/ResilienceTask2Tests.java
  visible: false
  text: "import org.junit.jupiter.api.Test;\nimport reactor.core.publisher.Flux;\n\
    import reactor.test.StepVerifier;\n\npublic class ResilienceTask2Tests {\n\n\t\
    @Test\n\tpublic void testSolution() {\n\t\tStepVerifier\n\t\t\t\t.create(Task.fallbackOnError(Flux.error(new\
    \ RuntimeException()), \"Hello\"))\n\t\t\t\t.expectSubscription()\n\t\t\t\t.expectNext(\"\
    Hello\")\n\t\t\t\t.verifyComplete();\n\t}\n\n\t@Test\n\tpublic void testSolution1()\
    \ {\n\t\tStepVerifier\n\t\t\t\t.create(Task.fallbackOnError(Flux.just(\"123\"\
    ), \"Hello\"))\n\t\t\t\t.expectSubscription()\n\t\t\t\t.expectNext(\"123\")\n\t\
    \t\t\t.verifyComplete();\n\t}\n\n\n\t@Test\n\tpublic void testSolution2() {\n\t\
    \tStepVerifier\n\t\t\t\t.create(Task.fallbackOnError(Flux.empty(), \"Hello\"))\n\
    \t\t\t\t.expectSubscription()\n\t\t\t\t.verifyComplete();\n\t}\n}"
  learner_created: false
- name: build.gradle
  visible: false
  text: |-
    dependencies {
      implementation 'io.projectreactor:reactor-core'
    }
  learner_created: false
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 18 Nov 2022 19:12:40 UTC"
record: -1
